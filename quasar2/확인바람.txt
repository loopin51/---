
def manual_ccd_calibration(
    raw_light_data_np, 
    raw_light_header,
    master_bias_data_np=None, 
    master_dark_data_np=None, # LIGHT 프레임 노출시간에 맞는, BIAS가 빠진 DARK 데이터
    master_dark_header=None,  # master_dark_data_np의 헤더 (노출시간 정보 포함)
    prelim_flat_data_np=None, # 필터만 일치하는, BIAS/DARK 보정 안된 예비 FLAT 데이터
    prelim_flat_header=None,  # prelim_flat_data_np의 헤더 (노출시간 정보 포함)
    do_bias_correction=True,
    do_dark_correction=True,
    do_flat_correction=True
):
    """
    NumPy 배열을 사용하여 LIGHT 프레임을 수동으로 보정합니다.
    BIAS, DARK, FLAT 보정 단계를 선택적으로 적용할 수 있습니다.

    Args:
        raw_light_data_np (np.ndarray): 보정할 원본 LIGHT 프레임 데이터 (NumPy 배열).
        raw_light_header (astropy.io.fits.Header): 원본 LIGHT 프레임 헤더.
        master_bias_data_np (np.ndarray, optional): 마스터 BIAS 데이터 (NumPy 배열).
        master_dark_data_np (np.ndarray, optional): LIGHT 프레임 노출시간에 맞는, 
                                                  BIAS가 이미 제거된 마스터 DARK 데이터 (NumPy 배열).
        master_dark_header (astropy.io.fits.Header, optional): master_dark_data_np의 헤더.
                                                              FLAT 보정 시 DARK 스케일링에 사용.
        prelim_flat_data_np (np.ndarray, optional): 필터만 일치하는, BIAS/DARK 보정이 안 된 
                                                 "예비" 마스터 FLAT 데이터 (NumPy 배열).
        prelim_flat_header (astropy.io.fits.Header, optional): prelim_flat_data_np의 헤더.
        do_bias_correction (bool, optional): BIAS 보정 수행 여부. Defaults to True.
        do_dark_correction (bool, optional): DARK 보정 수행 여부. Defaults to True.
        do_flat_correction (bool, optional): FLAT 보정 수행 여부. Defaults to True.

    Returns:
        tuple: (calibrated_data_np, processing_log_list)
               calibrated_data_np (np.ndarray): 최종 보정된 LIGHT 프레임 데이터.
               processing_log_list (list): 처리 중 발생한 로그 메시지 리스트.
    """
    processing_log = []
    calibrated_data = raw_light_data_np.copy() # 원본 데이터 복사하여 사용

    # 1. BIAS 보정
    if do_bias_correction:
        if master_bias_data_np is not None and calibrated_data.shape == master_bias_data_np.shape:
            calibrated_data = calibrated_data - master_bias_data_np
            processing_log.append("수동 보정: BIAS 보정됨.")
        else:
            processing_log.append("경고 (수동 보정): BIAS 보정 생략 (BIAS 데이터 없거나 크기 불일치).")
    else:
        processing_log.append("수동 보정: BIAS 보정 건너<0xEB><0><0x8F><0xEB><0x82><0xB4>니다.")

    # 2. DARK 보정 (LIGHT 프레임용)
    # master_dark_data_np는 이미 BIAS가 빠진 상태로 전달되어야 함.
    if do_dark_correction:
        if master_dark_data_np is not None and calibrated_data.shape == master_dark_data_np.shape:
            calibrated_data = calibrated_data - master_dark_data_np
            processing_log.append("수동 보정: DARK 보정됨 (LIGHT 프레임용).")
        else:
            processing_log.append("경고 (수동 보정): LIGHT 프레임 DARK 보정 생략 (DARK 데이터 없거나 크기 불일치).")
    else:
        processing_log.append("수동 보정: LIGHT 프레임 DARK 보정 건너<0xEB><0><0x8F><0xEB><0x82><0xB4>니다.")
            
    # 3. 최종 Master FLAT 생성 및 적용 (실시간)
    if do_flat_correction:
        final_mf_data_for_light = None
        if prelim_flat_data_np is not None and prelim_flat_header is not None:
            processing_log.append("수동 보정: 예비 플랫으로 최종 플랫 생성 시도.")
            flat_temp_data = prelim_flat_data_np.copy()

            # 3a. 예비 플랫에서 BIAS 빼기
            if master_bias_data_np is not None and flat_temp_data.shape == master_bias_data_np.shape:
                flat_temp_data = flat_temp_data - master_bias_data_np
                processing_log.append("  예비 플랫에 BIAS 적용됨.")
            else:
                processing_log.append("  경고: 예비 플랫에 BIAS 적용 못함 (BIAS 없거나 크기 불일치).")

            # 3b. (BIAS 빠진) 예비 플랫에서 LIGHT 프레임 노출시간에 맞는 DARK 빼기 (스케일링 고려)
            # master_dark_data_np는 LIGHT 프레임의 노출시간에 맞는 DARK임.
            if master_dark_data_np is not None and master_dark_header is not None and \
               flat_temp_data.shape == master_dark_data_np.shape:
                
                flat_original_exptime_val = get_fits_keyword(prelim_flat_header, ['EXPTIME', 'EXPOSURE'], default_value=None, data_type=float, quiet=True)
                dark_for_flat_exptime_val = get_fits_keyword(master_dark_header, ['EXPTIME', 'EXPOSURE'], default_value=None, data_type=float, quiet=True)

                if flat_original_exptime_val is not None and dark_for_flat_exptime_val is not None and \
                   flat_original_exptime_val > 0 and dark_for_flat_exptime_val > 0 and \
                   not np.isclose(flat_original_exptime_val, dark_for_flat_exptime_val):
                    scale_factor = flat_original_exptime_val / dark_for_flat_exptime_val
                    flat_temp_data = flat_temp_data - (master_dark_data_np * scale_factor)
                    processing_log.append(f"  예비 플랫에 DARK 적용됨 (스케일링 인자: {scale_factor:.3f}). Flat Exp: {flat_original_exptime_val}s, Dark Exp: {dark_for_flat_exptime_val}s")
                elif flat_original_exptime_val is not None and dark_for_flat_exptime_val is not None and \
                     np.isclose(flat_original_exptime_val, dark_for_flat_exptime_val):
                    flat_temp_data = flat_temp_data - master_dark_data_np
                    processing_log.append(f"  예비 플랫에 DARK 적용됨 (노출시간 일치, 스케일링 없음).")
                else: 
                    # 노출 시간 정보가 불충분하면 일단 스케일링 없이 빼기 시도 (같은 노출시간으로 가정)
                    flat_temp_data = flat_temp_data - master_dark_data_np
                    processing_log.append(f"  경고: 예비 플랫의 DARK 보정 시 노출시간 정보 부족/불일치. 스케일링 없이 DARK 적용 시도.")
            else:
                processing_log.append(f"  경고: 예비 플랫에 DARK 적용 못함 (LIGHT용 DARK 없거나 크기 불일치).")
            
            # 3c. 중앙값으로 정규화
            median_val = np.nanmedian(flat_temp_data)
            if median_val is not None and not np.isclose(median_val, 0) and np.isfinite(median_val):
                final_mf_data_for_light = flat_temp_data / median_val
                processing_log.append(f"  최종 Master FLAT 생성 및 정규화 완료 (중앙값: {median_val:.2f}).")
            else:
                final_mf_data_for_light = flat_temp_data 
                processing_log.append(f"  경고: 최종 Master FLAT 정규화 실패 (중앙값: {median_val}). 정규화 안된 플랫 사용.")
        
        if final_mf_data_for_light is None: 
            processing_log.append("경고 (수동 보정): 최종 Master FLAT 생성 실패. FLAT 보정 생략.")
        else:
            # 3d. FLAT 보정 적용
            if calibrated_data.shape == final_mf_data_for_light.shape:
                safe_flat = np.where(np.abs(final_mf_data_for_light) < 1e-5, 1.0, final_mf_data_for_light) # 0으로 나누기 방지
                calibrated_data = calibrated_data / safe_flat
                processing_log.append("수동 보정: FLAT 보정됨.")
            else:
                processing_log.append("경고 (수동 보정): FLAT 보정 생략 (크기 불일치).")
    else:
        processing_log.append("수동 보정: FLAT 보정 건너<0xEB><0><0x8F><0xEB><0x82><0xB4>니다.")
            
    return calibrated_data, processing_log